// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/curserio/chrono-api/internal/repository (interfaces: MasterRepository,ScheduleRepository,ServiceRepository,BookingRepository,ClientRepository)
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_repository.go -package=mock github.com/curserio/chrono-api/internal/repository MasterRepository,ScheduleRepository,ServiceRepository,BookingRepository,ClientRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/curserio/chrono-api/internal/domain/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMasterRepository is a mock of MasterRepository interface.
type MockMasterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterRepositoryMockRecorder
	isgomock struct{}
}

// MockMasterRepositoryMockRecorder is the mock recorder for MockMasterRepository.
type MockMasterRepositoryMockRecorder struct {
	mock *MockMasterRepository
}

// NewMockMasterRepository creates a new mock instance.
func NewMockMasterRepository(ctrl *gomock.Controller) *MockMasterRepository {
	mock := &MockMasterRepository{ctrl: ctrl}
	mock.recorder = &MockMasterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterRepository) EXPECT() *MockMasterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMasterRepository) Create(ctx context.Context, master *entity.Master) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, master)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMasterRepositoryMockRecorder) Create(ctx, master any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterRepository)(nil).Create), ctx, master)
}

// Delete mocks base method.
func (m *MockMasterRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockMasterRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMasterRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMasterRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockMasterRepository) List(ctx context.Context, offset, limit int) ([]*entity.Master, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]*entity.Master)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMasterRepositoryMockRecorder) List(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMasterRepository)(nil).List), ctx, offset, limit)
}

// Update mocks base method.
func (m *MockMasterRepository) Update(ctx context.Context, master *entity.Master) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, master)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMasterRepositoryMockRecorder) Update(ctx, master any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterRepository)(nil).Update), ctx, master)
}

// MockScheduleRepository is a mock of ScheduleRepository interface.
type MockScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleRepositoryMockRecorder
	isgomock struct{}
}

// MockScheduleRepositoryMockRecorder is the mock recorder for MockScheduleRepository.
type MockScheduleRepositoryMockRecorder struct {
	mock *MockScheduleRepository
}

// NewMockScheduleRepository creates a new mock instance.
func NewMockScheduleRepository(ctrl *gomock.Controller) *MockScheduleRepository {
	mock := &MockScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleRepository) EXPECT() *MockScheduleRepositoryMockRecorder {
	return m.recorder
}

// AddDay mocks base method.
func (m *MockScheduleRepository) AddDay(ctx context.Context, day *entity.ScheduleDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDay", ctx, day)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDay indicates an expected call of AddDay.
func (mr *MockScheduleRepositoryMockRecorder) AddDay(ctx, day any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDay", reflect.TypeOf((*MockScheduleRepository)(nil).AddDay), ctx, day)
}

// AddSlot mocks base method.
func (m *MockScheduleRepository) AddSlot(ctx context.Context, slot *entity.ScheduleSlot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSlot", ctx, slot)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSlot indicates an expected call of AddSlot.
func (mr *MockScheduleRepositoryMockRecorder) AddSlot(ctx, slot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSlot", reflect.TypeOf((*MockScheduleRepository)(nil).AddSlot), ctx, slot)
}

// Create mocks base method.
func (m *MockScheduleRepository) Create(ctx context.Context, schedule *entity.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScheduleRepositoryMockRecorder) Create(ctx, schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScheduleRepository)(nil).Create), ctx, schedule)
}

// Delete mocks base method.
func (m *MockScheduleRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScheduleRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScheduleRepository)(nil).Delete), ctx, id)
}

// DeleteDay mocks base method.
func (m *MockScheduleRepository) DeleteDay(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDay", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDay indicates an expected call of DeleteDay.
func (mr *MockScheduleRepositoryMockRecorder) DeleteDay(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDay", reflect.TypeOf((*MockScheduleRepository)(nil).DeleteDay), ctx, id)
}

// DeleteSlot mocks base method.
func (m *MockScheduleRepository) DeleteSlot(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSlot", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSlot indicates an expected call of DeleteSlot.
func (mr *MockScheduleRepositoryMockRecorder) DeleteSlot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSlot", reflect.TypeOf((*MockScheduleRepository)(nil).DeleteSlot), ctx, id)
}

// GetByID mocks base method.
func (m *MockScheduleRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockScheduleRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockScheduleRepository)(nil).GetByID), ctx, id)
}

// GetByMasterID mocks base method.
func (m *MockScheduleRepository) GetByMasterID(ctx context.Context, masterID uuid.UUID) ([]*entity.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMasterID", ctx, masterID)
	ret0, _ := ret[0].([]*entity.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMasterID indicates an expected call of GetByMasterID.
func (mr *MockScheduleRepositoryMockRecorder) GetByMasterID(ctx, masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMasterID", reflect.TypeOf((*MockScheduleRepository)(nil).GetByMasterID), ctx, masterID)
}

// GetDayByID mocks base method.
func (m *MockScheduleRepository) GetDayByID(ctx context.Context, id uuid.UUID) (*entity.ScheduleDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDayByID", ctx, id)
	ret0, _ := ret[0].(*entity.ScheduleDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDayByID indicates an expected call of GetDayByID.
func (mr *MockScheduleRepositoryMockRecorder) GetDayByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDayByID", reflect.TypeOf((*MockScheduleRepository)(nil).GetDayByID), ctx, id)
}

// GetDaysByScheduleID mocks base method.
func (m *MockScheduleRepository) GetDaysByScheduleID(ctx context.Context, scheduleID uuid.UUID) ([]*entity.ScheduleDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaysByScheduleID", ctx, scheduleID)
	ret0, _ := ret[0].([]*entity.ScheduleDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaysByScheduleID indicates an expected call of GetDaysByScheduleID.
func (mr *MockScheduleRepositoryMockRecorder) GetDaysByScheduleID(ctx, scheduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaysByScheduleID", reflect.TypeOf((*MockScheduleRepository)(nil).GetDaysByScheduleID), ctx, scheduleID)
}

// GetDaysByWeekday mocks base method.
func (m *MockScheduleRepository) GetDaysByWeekday(ctx context.Context, masterID uuid.UUID, weekday int) ([]*entity.ScheduleDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDaysByWeekday", ctx, masterID, weekday)
	ret0, _ := ret[0].([]*entity.ScheduleDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDaysByWeekday indicates an expected call of GetDaysByWeekday.
func (mr *MockScheduleRepositoryMockRecorder) GetDaysByWeekday(ctx, masterID, weekday any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDaysByWeekday", reflect.TypeOf((*MockScheduleRepository)(nil).GetDaysByWeekday), ctx, masterID, weekday)
}

// GetSlotByID mocks base method.
func (m *MockScheduleRepository) GetSlotByID(ctx context.Context, id uuid.UUID) (*entity.ScheduleSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotByID", ctx, id)
	ret0, _ := ret[0].(*entity.ScheduleSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotByID indicates an expected call of GetSlotByID.
func (mr *MockScheduleRepositoryMockRecorder) GetSlotByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotByID", reflect.TypeOf((*MockScheduleRepository)(nil).GetSlotByID), ctx, id)
}

// GetSlotsByDate mocks base method.
func (m *MockScheduleRepository) GetSlotsByDate(ctx context.Context, masterID uuid.UUID, date time.Time) ([]*entity.ScheduleSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotsByDate", ctx, masterID, date)
	ret0, _ := ret[0].([]*entity.ScheduleSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotsByDate indicates an expected call of GetSlotsByDate.
func (mr *MockScheduleRepositoryMockRecorder) GetSlotsByDate(ctx, masterID, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotsByDate", reflect.TypeOf((*MockScheduleRepository)(nil).GetSlotsByDate), ctx, masterID, date)
}

// GetSlotsByScheduleID mocks base method.
func (m *MockScheduleRepository) GetSlotsByScheduleID(ctx context.Context, scheduleID uuid.UUID) ([]*entity.ScheduleSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotsByScheduleID", ctx, scheduleID)
	ret0, _ := ret[0].([]*entity.ScheduleSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlotsByScheduleID indicates an expected call of GetSlotsByScheduleID.
func (mr *MockScheduleRepositoryMockRecorder) GetSlotsByScheduleID(ctx, scheduleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotsByScheduleID", reflect.TypeOf((*MockScheduleRepository)(nil).GetSlotsByScheduleID), ctx, scheduleID)
}

// List mocks base method.
func (m *MockScheduleRepository) List(ctx context.Context, offset, limit int) ([]*entity.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]*entity.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockScheduleRepositoryMockRecorder) List(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScheduleRepository)(nil).List), ctx, offset, limit)
}

// Update mocks base method.
func (m *MockScheduleRepository) Update(ctx context.Context, schedule *entity.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScheduleRepositoryMockRecorder) Update(ctx, schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScheduleRepository)(nil).Update), ctx, schedule)
}

// UpdateDay mocks base method.
func (m *MockScheduleRepository) UpdateDay(ctx context.Context, day *entity.ScheduleDay) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDay", ctx, day)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDay indicates an expected call of UpdateDay.
func (mr *MockScheduleRepositoryMockRecorder) UpdateDay(ctx, day any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDay", reflect.TypeOf((*MockScheduleRepository)(nil).UpdateDay), ctx, day)
}

// UpdateSlot mocks base method.
func (m *MockScheduleRepository) UpdateSlot(ctx context.Context, day *entity.ScheduleSlot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSlot", ctx, day)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSlot indicates an expected call of UpdateSlot.
func (mr *MockScheduleRepositoryMockRecorder) UpdateSlot(ctx, day any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSlot", reflect.TypeOf((*MockScheduleRepository)(nil).UpdateSlot), ctx, day)
}

// MockServiceRepository is a mock of ServiceRepository interface.
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
	isgomock struct{}
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository.
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance.
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceRepository) Create(ctx context.Context, service *entity.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceRepositoryMockRecorder) Create(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceRepository)(nil).Create), ctx, service)
}

// Delete mocks base method.
func (m *MockServiceRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockServiceRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockServiceRepository)(nil).GetByID), ctx, id)
}

// GetByMasterID mocks base method.
func (m *MockServiceRepository) GetByMasterID(ctx context.Context, masterID uuid.UUID) ([]*entity.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMasterID", ctx, masterID)
	ret0, _ := ret[0].([]*entity.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMasterID indicates an expected call of GetByMasterID.
func (mr *MockServiceRepositoryMockRecorder) GetByMasterID(ctx, masterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMasterID", reflect.TypeOf((*MockServiceRepository)(nil).GetByMasterID), ctx, masterID)
}

// Update mocks base method.
func (m *MockServiceRepository) Update(ctx context.Context, service *entity.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, service)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceRepositoryMockRecorder) Update(ctx, service any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceRepository)(nil).Update), ctx, service)
}

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
	isgomock struct{}
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingRepository) Create(ctx context.Context, booking *entity.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookingRepositoryMockRecorder) Create(ctx, booking any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRepository)(nil).Create), ctx, booking)
}

// Delete mocks base method.
func (m *MockBookingRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookingRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookingRepository)(nil).Delete), ctx, id)
}

// GetByClientID mocks base method.
func (m *MockBookingRepository) GetByClientID(ctx context.Context, clientID uuid.UUID) ([]*entity.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClientID", ctx, clientID)
	ret0, _ := ret[0].([]*entity.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClientID indicates an expected call of GetByClientID.
func (mr *MockBookingRepositoryMockRecorder) GetByClientID(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClientID", reflect.TypeOf((*MockBookingRepository)(nil).GetByClientID), ctx, clientID)
}

// GetByID mocks base method.
func (m *MockBookingRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBookingRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookingRepository)(nil).GetByID), ctx, id)
}

// GetByMasterID mocks base method.
func (m *MockBookingRepository) GetByMasterID(ctx context.Context, masterID uuid.UUID, from, to time.Time) ([]*entity.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMasterID", ctx, masterID, from, to)
	ret0, _ := ret[0].([]*entity.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMasterID indicates an expected call of GetByMasterID.
func (mr *MockBookingRepositoryMockRecorder) GetByMasterID(ctx, masterID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMasterID", reflect.TypeOf((*MockBookingRepository)(nil).GetByMasterID), ctx, masterID, from, to)
}

// UpdateStatus mocks base method.
func (m *MockBookingRepository) UpdateStatus(ctx context.Context, id uuid.UUID, status entity.BookingStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockBookingRepositoryMockRecorder) UpdateStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockBookingRepository)(nil).UpdateStatus), ctx, id, status)
}

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
	isgomock struct{}
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClientRepository) Create(ctx context.Context, client *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientRepositoryMockRecorder) Create(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientRepository)(nil).Create), ctx, client)
}

// Delete mocks base method.
func (m *MockClientRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockClientRepository) GetByID(ctx context.Context, id uuid.UUID) (*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockClientRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockClientRepository)(nil).GetByID), ctx, id)
}

// List mocks base method.
func (m *MockClientRepository) List(ctx context.Context, offset, limit int) ([]*entity.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, offset, limit)
	ret0, _ := ret[0].([]*entity.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientRepositoryMockRecorder) List(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientRepository)(nil).List), ctx, offset, limit)
}

// Update mocks base method.
func (m *MockClientRepository) Update(ctx context.Context, client *entity.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientRepositoryMockRecorder) Update(ctx, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientRepository)(nil).Update), ctx, client)
}
